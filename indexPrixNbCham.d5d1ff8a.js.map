{"version":3,"sources":["scripts/explCoutNbCham/helper.js","scripts/explCoutNbCham/preprocess.js","scripts/explCoutNbCham/viz.js","indexPrixNbCham.js"],"names":["generateG","margin","d3","select","append","attr","left","top","appendAxes","g","appendGraphLabels","text","defineColorScale","colors","players","scaleOrdinal","range","domain","setCanvasSize","width","height","positionLabels","drawXAxis","xScale","call","axisBottom","drawYAxis","yScale","axisLeft","ticks","extractPriceType","data","map","elem","clean_data","filter","divData","temp","forEach","hasOwnProperty","push","ans","key","arrToDist","arr","sort","a","b","Math","floor","length","endResult","updateXScale","scale","keys","Object","parseInt","updateYScale","maxi","Infinity","drawBoxes","y","x","bandwidth","right","selectAll","remove","enter","line","svgSize","graphSize","bounds","bottom","scaleBand","scaleLinear","helper","csv","autoType","then","extracted_data","preproc","setSizing","node","getBoundingClientRect","build","viz","window","addEventListener"],"mappings":"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","file":"indexPrixNbCham.d5d1ff8a.js","sourceRoot":"../src","sourcesContent":["\n/**\n * Generates the SVG element g which will contain the data visualisation.\n *\n * @param {object} margin The desired margins around the graph\n * @returns {*} The d3 Selection for the created g element\n */\n export function generateG (margin) {\n  return d3.select('.graph-prix-nbCham')\n    .select('svg')\n    .append('g')\n    .attr('id', 'graph-g-nbCham')\n    .attr('transform',\n      'translate(' + margin.left + ',' + margin.top + ')')\n}\n\n/**\n * Appends an SVG g element which will contain the y axis.\n *\n * @param {*} g The d3 Selection of the graph's g SVG element\n */\nexport function appendAxes (g) {\n  g.append('g')\n    .attr('class', 'x axis-nbCham')\n\n  g.append('g')\n    .attr('class', 'y axis-nbCham')\n}\n/**\n * Appends the labels for the the y axis and the title of the graph.\n *\n * @param {*} g The d3 Selection of the graph's g SVG element\n */\nexport function appendGraphLabels (g) {\n  g.append('text')\n    .text('Prix ($)')\n    .attr('class', 'y axis-text nbCham')\n    .attr('transform', 'rotate(-90)')\n    .attr('fill', '#898989')\n    .attr('font-size', 12)\n\n  g.append('text')\n    .text(\"Nombre de chambres\")\n    .attr('class', 'x axis-text nbCham')\n    .attr('fill', '#898989')\n    .attr('font-size', 12)\n\n  g.append('text')\n    .text('Variation du prix en fonction du nombre de chambre')\n    .attr('class', 'title nbCham')\n    .attr('fill', '#898989')\n}\n\n/**\n * Defines the color scale used in the graph.\n *\n * @param {string[]} colors A sorted array of color hex strings to be used\n * @param {string[]} players A sorted array of player names to use as the domain\n * @returns {*} The color scale to be used inthe graph\n */\nexport function defineColorScale (colors, players) {\n  return d3.scaleOrdinal().range(colors).domain(players)\n}\n\n/**\n * Sets the size of the SVG canvas containing the graph.\n *\n * @param {number} width The desired width\n * @param {number} height The desired height\n */\nexport function setCanvasSize (width, height) {\n  d3.select('#bar-chart-prix-nbCham').select('svg')\n    .attr('width', width)\n    .attr('height', height)\n}\n\n/**\n * Positions the x axis label, y axis label and title label on the graph.\n *\n * @param {number} width The width of the graph\n * @param {number} height The height of the graph\n */\nexport function positionLabels (width, height) {\n  d3.select('.y.axis-text.nbCham')\n    .attr('x', -70)\n    .attr('y', height / 2)\n\n  d3.select('.x.axis-text.nbCham')\n    .attr('x', width / 2)\n    .attr('y', height + 50)\n\n  d3.select('.title.nbCham')\n    .attr('x', width / 2)\n    .attr('y', -35)\n}\n\n/**\n * Draws the x axis at the bottom of the plot.\n *\n * @param {*} xScale The scale to use for the x axis\n * @param {number} height The height of the graph\n */\nexport function drawXAxis (xScale, height) {\n  d3.select('.x.axis-nbCham')\n    .attr('transform', 'translate(0, ' + height + ')')\n    .call(d3.axisBottom(xScale))\n}\n\n/**\n * Draws the y axis at the left of the plot.\n *\n * @param {*} yScale The scale to use for the y axis\n */\nexport function drawYAxis (yScale) {\n  d3.select('.y.axis-nbCham').call(d3.axisLeft(yScale).ticks(5))\n}\n","/**\n * Extracts the price and the number of bedrooms of the mainstream data\n *\n * @param {object[]} data the data to be used\n * @returns {object[]} The extracted data\n */\nfunction extractPriceType(data) {\n   return data.map(elem => {\n     return {\n      \"price\": elem[\"price\"],\n      \"nbBeds\": elem[\"numberbedrooms\"]\n     }\n   })\n}\n\n/**\n * Cleans the data\n *\n * @param {object[]} data the data to be used\n * @returns {object[]} The cleaned data\n */\nfunction clean_data(data) {\n  return data.filter(elem => elem[\"nbBeds\"] != 0 && elem[\"nbBeds\"] != \"Not Available\" );\n}\n\n/**\n * Divide the different data into percentiles (10th, 25th, 50th, 75th,90th)\n *\n * @param {object[]} data the data to be used\n * @returns {object} The divided data\n */\nfunction divData(data) {\n  let temp = {}\n  data.forEach(elem => {\n    if(temp.hasOwnProperty(elem[\"nbBeds\"])){\n      temp[elem[\"nbBeds\"]].push(elem[\"price\"])\n    }else{\n      temp[elem[\"nbBeds\"]] = []\n    }\n  })\n  \n  let ans = {}\n  for(let key in temp){\n    ans[key] = arrToDist(temp[key])\n  }\n  return ans \n}\n\n/**\n * Transforms array into percentiles (10th, 25th, 50th, 75th,90th)\n *\n * @param {number[]} data the data to be used\n * @returns {object} The percentiles \n */\n function arrToDist(arr) {\n  arr.sort(function(a, b) {\n    return a - b;\n  });\n  return {\n    \"10\": arr[Math.floor(arr.length / 10)],\n    \"25\": arr[Math.floor(arr.length * 1 / 4)],\n    \"50\": arr[Math.floor(arr.length * 1 / 2)],\n    \"75\": arr[Math.floor(arr.length * 3 / 4)],\n    \"90\": arr[Math.floor(arr.length * 9 / 10)]\n  }\n}\n\n\n/**\n * Processes the data to have in the format that we desire\n *\n * @param {object[]} data the data to be used\n * @returns {object[]} The processed data\n */\nexport function endResult (data) {\n  let extracted_data = extractPriceType(data)\n  let cleaned_data = clean_data(extracted_data)\n  let div_data = divData(cleaned_data)\n  return div_data\n}\n\n\n","/**\n * Sets the domain and range of the X scale.\n *\n * @param {*} scale The x scale\n * @param {object[]} data The data to be used\n * @param {number} width The width of the graph\n */\n export function updateXScale (scale, data, width) {\n  // TODO : Set the domain and range of the groups' x scale\n  let keys = Object.keys(data)\n  keys.sort(function(a, b) {\n      return parseInt(a) - parseInt(b);\n    });\n  scale.domain(keys).range([0, width])\n}\n\n\n\n/**\n * Sets the domain and range of the Y scale.\n *\n * @param {*} scale The Y scale\n * @param {object[]} data The data to be used\n * @param {number} height The height of the graph\n */\nexport function updateYScale (scale, data, height) {\n  // TODO : Set the domain and range of the graph's y scale\n  let maxi = -Infinity\n\n  for(let key in data){\n    if(data[key][\"90\"] > maxi){\n      maxi = data[key][\"90\"]\n    }\n  }\n  \n  scale.domain([0, maxi]).range([height, 0]);\n}\n\n/**\n * Draws the bars\n *\n * @param {*} y The graph's y scale\n * @param {*} x The graph's x scale\n * @param {*} data The data to be used\n * @param {*} tip The tooltip to show when each bar is hovered and hide when it's not\n */\n export function drawBoxes(y, x, data, height) {\n\n  let width = x.bandwidth()\n  let left = (width) => width/3\n  let right = (width) => width*2/3\n  \n  d3.selectAll('.nbChamCircles').remove()\n\n\n  let keys = Object.keys(data)\n\n  d3.selectAll(\".area-circle\").remove()\n\n\n\n  //draw the 10th percentile\n  const line1 = d3.select('#graph-g-nbCham')\n                .selectAll('.area-circle')\n                .data(keys)\n                .enter()\n                .append('path')\n\n  line1.attr( 'd', (elem) => d3.line()([[x(elem) + left(width), y(data[elem][\"10\"])], [x(elem) + right(width), y(data[elem][\"10\"]) ]]) )\n        .attr('class', 'nbChamCircles')\n        .attr('stroke', 'black')\n\n  //draw the 90th percentile\n  const line2 = d3.select('#graph-g-nbCham')\n        .selectAll('.area-circle')\n        .data(keys)\n        .enter()\n        .append('path')\n\n  line2.attr( 'd', (elem) => d3.line()([[x(elem) + left(width), y(data[elem][\"90\"])], [x(elem) + right(width), y(data[elem][\"90\"]) ]]) )\n  .attr('class', 'nbChamCircles')\n  .attr('stroke', 'black')\n\n  //draw the middle line\n  const line3 = d3.select('#graph-g-nbCham')\n        .selectAll('.area-circle')\n        .data(keys)\n        .enter()\n        .append('path')\n\n  line3.attr( 'd', (elem) => d3.line()([[x(elem) + width/2, y(data[elem][\"10\"])], [x(elem) + width/2, y(data[elem][\"90\"]) ]]) )\n  .attr('class', 'nbChamCircles')\n  .attr('stroke', 'black')\n\n  //draw the rectangle\n  const rect = d3.select('#graph-g-nbCham')\n        .selectAll('.area-circle')\n        .data(keys)\n        .enter()\n        .append('rect')\n\n  rect.attr('x', (elem) => x(elem) + left(width))\n      .attr('y', (elem) => y(data[elem][\"75\"]))\n      .attr('class', 'nbChamCircles')\n      .attr('width', right(width) - left(width))\n      .attr('height', (elem) => (y(data[elem][\"25\"]) - y(data[elem][\"75\"])) )\n      .attr('stroke', 'black')\n      .attr('fill', '#69a3b2');\n\n  //draw the median\n  const median = d3.select('#graph-g-nbCham')\n                .selectAll('.area-circle')\n                .data(keys)\n                .enter()\n                .append('path')\n\n  median.attr( 'd', (elem) => d3.line()([[x(elem) + left(width), y(data[elem][\"50\"])], [x(elem) + right(width), y(data[elem][\"50\"]) ]]) )\n        .attr('class', 'nbChamCircles')\n        .attr('stroke', 'black')\n}\n","import * as helper from './scripts/explCoutNbCham/helper'\nimport * as preproc from \"./scripts/explCoutNbCham/preprocess\"\nimport * as viz from './scripts/explCoutNbCham/viz'\n\n/**\n * @file This file is the entry-point for the the code for TP3 for the course INF8808.\n * @author Olivia Gélinas\n * @version v1.0.0\n */\n\n(function (d3) {\n  const margin = { top: 50, right: 0, bottom: 50, left: 75 }\n  let svgSize, graphSize, bounds;\n\n  const xScale = d3.scaleBand()\n  const yScale = d3.scaleLinear()\n\n  const g = helper.generateG(margin)\n  helper.appendAxes(g)\n  helper.appendGraphLabels(g)\n\n\n  d3.csv(\"Logement-Locatif-Viz/donnees_habitations.csv\", d3.autoType).then(function (data) {\n    const extracted_data = preproc.endResult(data)\n    setSizing();\n    build();\n\n    function setSizing() {\n      bounds = d3.select('.graph-prix-nbCham').node().getBoundingClientRect()\n\n      svgSize = {\n        width: bounds.width,\n        height: 700\n      }\n\n      graphSize = {\n        width: svgSize.width - margin.right - margin.left,\n        height: svgSize.height - margin.bottom - margin.top,\n      };\n      helper.setCanvasSize(svgSize.width, svgSize.height)\n    }\n    function build() {\n      helper.positionLabels(graphSize.width, graphSize.height);\n      \n      viz.updateXScale(xScale, extracted_data, graphSize.width);\n      viz.updateYScale(yScale, extracted_data, graphSize.height);\n\n      helper.drawXAxis(xScale, graphSize.height);\n      helper.drawYAxis(yScale);\n      \n      viz.drawBoxes(yScale, xScale, extracted_data, graphSize.height)\n    }\n\n    window.addEventListener(\"resize\", () => {\n      setSizing();\n      build();\n    });\n  });\n})(d3);\n"]}