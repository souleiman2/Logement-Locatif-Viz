{"version":3,"sources":["scripts/distDimensions/preprocess.js","indexDistDimen.js"],"names":["getExtractedData","data","map","elem","getNodes","ans","index","temp","forEach","hasOwnProperty","beds_keys","Object","keys","last_item","pop","sort","a","b","parseFloat","push","total","node","name","toString","centerIndex","getLinks","nodes","links","i","valueTemp","parseInt","split","source","target","value","length","endResult","nodesTemp","d3","margin","width","height","formatNumber","format","d","color","scaleOrdinal","schemeCategory10","svg","select","append","attr","sankey","nodeWidth","nodePadding","size","path","link","csv","autoType","then","graph","preproc","layout","selectAll","enter","style","Math","max","dy","text","x","y","call","drag","subject","on","parentNode","appendChild","min","dx","event","relayout","replace","rgb","darker","filter"],"mappings":"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","file":"indexDistDimen.b74ae0da.js","sourceRoot":"../src","sourcesContent":["\n/**\n * Extracts the number of bedrooms and the type from the original data\n *\n * @param {object[]} data the data to be used\n * @returns {object[]} The extracted data\n */\nexport function getExtractedData (data) {\n    return data.map(elem => {\n        return {\n         \"nbBeds\": elem[\"numberbedrooms\"],\n         \"type\": elem[\"unitype\"]\n        }\n      })\n}\n\n/**\n * Transforms the data to get the nodes of the sankey diagram\n *\n * @param {object[]} data the data to be used\n * @returns {object[]} The color scale to be used inthe graph\n * Final format :\n * \n * [\n    {\"node\":0,\"name\":\"node0\"},\n    {\"node\":1,\"name\":\"node1\"},\n    {\"node\":2,\"name\":\"node2\"},\n    {\"node\":3,\"name\":\"node3\"},\n    {\"node\":4,\"name\":\"node4\"}\n    ],\n * \n */\n export function getNodes(data) {\n    let ans = []\n    let index = 0\n    let temp = {}\n\n    data.forEach(elem => {\n        temp[elem[\"nbBeds\"]] = temp.hasOwnProperty(elem[\"nbBeds\"]) ? temp[elem[\"nbBeds\"]] + 1  : 1\n    })\n\n    let beds_keys = Object.keys(temp)\n    let last_item = beds_keys.pop()\n    beds_keys.sort(function(a,b){\n        return parseFloat(a) - parseFloat(b)  \n    })\n    beds_keys.push(last_item)\n    \n    let total = 0\n    beds_keys.forEach(elem => {\n        total += temp[elem]\n        ans.push({node: index, name: temp[elem].toString() + ((elem.toString() != \"Not Available\")? \" ont \" : \" \") + elem.toString() + ((elem.toString() != \"Not Available\")? \" piÃ¨ces\" : \"\")})\n        index += 1\n    })\n\n    let centerIndex = index\n    ans.push({node : centerIndex, name : total.toString() + \" habitations\"})\n    index += 1\n    \n    temp = {}\n\n    data.forEach(elem => {\n        temp[elem[\"type\"]] = temp.hasOwnProperty(elem[\"type\"]) ? temp[elem[\"type\"]] + 1  : 1\n    })\n    let type_keys = Object.keys(temp)\n    type_keys.forEach(elem => {\n        ans.push({node: index, name: temp[elem].toString() + \" \" + elem.toString()})\n        index += 1\n    })\n    return [ans, centerIndex]\n}\n\n/**\n * Defines the different links between the nodes\n *\n * @param {object[]} data the data to be used\n * @returns {object[]} The links between the nodes\n * \n * Final format : \n * \n *  [\n    {\"source\":0,\"target\":2,\"value\":2},\n    {\"source\":1,\"target\":2,\"value\":2},\n    {\"source\":1,\"target\":3,\"value\":2},\n    {\"source\":0,\"target\":4,\"value\":2},\n    {\"source\":2,\"target\":3,\"value\":2},\n    {\"source\":2,\"target\":4,\"value\":2},\n    {\"source\":3,\"target\":4,\"value\":4}\n    ]}\n * \n */\nexport function getLinks (nodes, centerIndex) {\n\n    let links = []\n    let index = 0\n    \n    for(let i = 0; i < centerIndex; i++){\n        let valueTemp = parseInt(nodes[i][\"name\"].split(\" \")[0])\n        links.push({source : i, target : centerIndex, value : valueTemp})\n    }\n    for(let i = centerIndex + 1; i < nodes.length; i++){\n        let valueTemp = parseInt(nodes[i][\"name\"].split(\" \")[0])\n        links.push({source : centerIndex, target : i, value : valueTemp})\n    }\n    return links\n}\n\n\n\n\n/**\n * Processes the data\n *\n * @param {object[]} data the data to be used\n * @returns {object} Nodes and the links for the sankey diagram \n */\n export function endResult (data) {\n    let extracted_data = getExtractedData(data)\n    let [nodesTemp, centerIndex] = getNodes(extracted_data)\n    let linksTemp = getLinks(nodesTemp, centerIndex)\n    return {nodes : nodesTemp, links : linksTemp}\n}\n\n  \n  ","import * as preproc from './scripts/distDimensions/preprocess'\n\n// link : https://gist.github.com/d3noob/d0a65a5526872728400758d4b7de582c (license MIT)\n\n(function (d3) {\n  var units = \"Widgets\";\n\n  // set the dimensions and margins of the graph\n  var margin = { top: 10, right: 10, bottom: 10, left: 10 },\n    width = 1000 - margin.left - margin.right,\n    height = 700 - margin.top - margin.bottom;\n\n  // format variables\n  var formatNumber = d3.format(\",.0f\"), // zero decimal places\n    format = function (d) {\n      return formatNumber(d) + \" \" + units;\n    },\n    color = d3.scaleOrdinal(d3.schemeCategory10);\n\n  // append the svg object to the body of the page\n  var svg = d3\n    .select(\"#chart\")\n    .append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n    .append(\"g\")\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n  // Set the sankey diagram properties\n  var sankey = d3.sankey().nodeWidth(36).nodePadding(40).size([width, height]);\n\n  var path = sankey.link();\n\n  d3.csv(\"Logement-Locatif-Viz/donnees_habitations.csv\", d3.autoType).then(function (data) {\n    let graph = preproc.endResult(data)\n\n    sankey.nodes(graph.nodes).links(graph.links).layout(32);\n\n    // add in the links\n    var link = svg\n      .append(\"g\")\n      .selectAll(\".link\")\n      .data(graph.links)\n      .enter()\n      .append(\"path\")\n      .attr(\"class\", \"link\")\n      .attr(\"d\", path)\n      .style(\"stroke-width\", function (d) {\n        return Math.max(1, d.dy);\n      })\n      .sort(function (a, b) {\n        return b.dy - a.dy;\n      });\n\n    // add the link titles\n    link.append(\"title\").text(function (d) {\n      return d.source.name + \" â \" + d.target.name + \"\\n\" + format(d.value);\n    });\n\n    // add in the nodes\n    var node = svg\n      .append(\"g\")\n      .selectAll(\".node\")\n      .data(graph.nodes)\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", \"node\")\n      .attr(\"transform\", function (d) {\n        return \"translate(\" + d.x + \",\" + d.y + \")\";\n      })\n      .call(\n        d3\n          .drag()\n          .subject(function (d) {\n            return d;\n          })\n          .on(\"start\", function () {\n            this.parentNode.appendChild(this);\n          })\n          .on(\"drag\", dragmove)\n      );\n\n    // add the rectangles for the nodes\n    node\n      .append(\"rect\")\n      .attr(\"height\", function (d) {\n        return d.dy;\n      })\n      .attr(\"width\", sankey.nodeWidth())\n      .style(\"fill\", function (d) {\n        return (d.color = color(d.name.replace(/ .*/, \"\")));\n      })\n      .style(\"stroke\", function (d) {\n        return d3.rgb(d.color).darker(2);\n      })\n      .append(\"title\")\n      .text(function (d) {\n        return d.name + \"\\n\" + format(d.value);\n      });\n\n    // add in the title for the nodes\n    node\n      .append(\"text\")\n      .attr(\"x\", -6)\n      .attr(\"y\", function (d) {\n        return d.dy / 2;\n      })\n      .attr(\"dy\", \".35em\")\n      .attr(\"text-anchor\", \"end\")\n      .attr(\"transform\", null)\n      .text(function (d) {\n        return d.name;\n      })\n      .filter(function (d) {\n        return d.x < width / 2;\n      })\n      .attr(\"x\", 6 + sankey.nodeWidth())\n      .attr(\"text-anchor\", \"start\");\n\n    // the function for moving the nodes\n    function dragmove(d) {\n      d3.select(this).attr(\n        \"transform\",\n        \"translate(\" +\n          (d.x = Math.max(0, Math.min(width - d.dx, d3.event.x))) +\n          \",\" +\n          (d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))) +\n          \")\"\n      );\n      sankey.relayout();\n      link.attr(\"d\", path);\n    }\n  });\n})(d3);\n"]}