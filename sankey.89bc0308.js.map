{"version":3,"sources":["scripts/distDimensions/sankey.js"],"names":["d3","sankey","nodeWidth","nodePadding","size","nodes","links","computeLinkDepths","ascendingSourceDepth","a","b","source","y","ascendingTargetDepth","target","forEach","node","sourceLinks","sort","targetLinks","sy","ty","link","dy","center","value","_","arguments","length","layout","iterations","push","Math","max","sum","nextNodes","remainingNodes","x","dx","indexOf","moveSinksRight","kx","computeNodeBreadths","nodesByBreadth","nest","key","d","sortKeys","ascending","entries","map","values","ky","min","i","resolveCollisions","alpha","relaxRightToLeft","relaxLeftToRight","weightedSource","breadth","weightedTarget","slice","reverse","y0","n","ascendingDepth","computeNodeDepths","relayout","curvature","x0","x1","xi","interpolateNumber","x2","x3","y1"],"mappings":"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","file":"sankey.89bc0308.js","sourceRoot":"../src","sourcesContent":["d3.sankey = function() {\n    var sankey = {},\n        nodeWidth = 24,\n        nodePadding = 8,\n        size = [1, 1],\n        nodes = [],\n        links = [];\n  \n    sankey.nodeWidth = function(_) {\n      if (!arguments.length) return nodeWidth;\n      nodeWidth = +_;\n      return sankey;\n    };\n  \n    sankey.nodePadding = function(_) {\n      if (!arguments.length) return nodePadding;\n      nodePadding = +_;\n      return sankey;\n    };\n  \n    sankey.nodes = function(_) {\n      if (!arguments.length) return nodes;\n      nodes = _;\n      return sankey;\n    };\n  \n    sankey.links = function(_) {\n      if (!arguments.length) return links;\n      links = _;\n      return sankey;\n    };\n  \n    sankey.size = function(_) {\n      if (!arguments.length) return size;\n      size = _;\n      return sankey;\n    };\n  \n    sankey.layout = function(iterations) {\n      computeNodeLinks();\n      computeNodeValues();\n      computeNodeBreadths();\n      computeNodeDepths(iterations);\n      computeLinkDepths();\n      return sankey;\n    };\n  \n    sankey.relayout = function() {\n      computeLinkDepths();\n      return sankey;\n    };\n  \n    sankey.link = function() {\n      var curvature = .5;\n  \n      function link(d) {\n        var x0 = d.source.x + d.source.dx,\n            x1 = d.target.x,\n            xi = d3.interpolateNumber(x0, x1),\n            x2 = xi(curvature),\n            x3 = xi(1 - curvature),\n            y0 = d.source.y + d.sy + d.dy / 2,\n            y1 = d.target.y + d.ty + d.dy / 2;\n        return \"M\" + x0 + \",\" + y0\n             + \"C\" + x2 + \",\" + y0\n             + \" \" + x3 + \",\" + y1\n             + \" \" + x1 + \",\" + y1;\n      }\n  \n      link.curvature = function(_) {\n        if (!arguments.length) return curvature;\n        curvature = +_;\n        return link;\n      };\n  \n      return link;\n    };\n  \n    // Populate the sourceLinks and targetLinks for each node.\n    // Also, if the source and target are not objects, assume they are indices.\n    function computeNodeLinks() {\n      nodes.forEach(function(node) {\n        node.sourceLinks = [];\n        node.targetLinks = [];\n      });\n      links.forEach(function(link) {\n        var source = link.source,\n            target = link.target;\n        if (typeof source === \"number\") source = link.source = nodes[link.source];\n        if (typeof target === \"number\") target = link.target = nodes[link.target];\n        source.sourceLinks.push(link);\n        target.targetLinks.push(link);\n      });\n    }\n  \n    // Compute the value (size) of each node by summing the associated links.\n    function computeNodeValues() {\n      nodes.forEach(function(node) {\n        node.value = Math.max(\n          d3.sum(node.sourceLinks, value),\n          d3.sum(node.targetLinks, value)\n        );\n      });\n    }\n  \n    // Iteratively assign the breadth (x-position) for each node.\n    // Nodes are assigned the maximum breadth of incoming neighbors plus one;\n    // nodes with no incoming links are assigned breadth zero, while\n    // nodes with no outgoing links are assigned the maximum breadth.\n    function computeNodeBreadths() {\n      var remainingNodes = nodes,\n          nextNodes,\n          x = 0;\n  \n      while (remainingNodes.length) {\n        nextNodes = [];\n        remainingNodes.forEach(function(node) {\n          node.x = x;\n          node.dx = nodeWidth;\n          node.sourceLinks.forEach(function(link) {\n            if (nextNodes.indexOf(link.target) < 0) {\n              nextNodes.push(link.target);\n            }\n          });\n        });\n        remainingNodes = nextNodes;\n        ++x;\n      }\n  \n      //\n      moveSinksRight(x);\n      scaleNodeBreadths((size[0] - nodeWidth) / (x - 1));\n    }\n  \n    function moveSourcesRight() {\n      nodes.forEach(function(node) {\n        if (!node.targetLinks.length) {\n          node.x = d3.min(node.sourceLinks, function(d) { return d.target.x; }) - 1;\n        }\n      });\n    }\n  \n    function moveSinksRight(x) {\n      nodes.forEach(function(node) {\n        if (!node.sourceLinks.length) {\n          node.x = x - 1;\n        }\n      });\n    }\n  \n    function scaleNodeBreadths(kx) {\n      nodes.forEach(function(node) {\n        node.x *= kx;\n      });\n    }\n  \n    function computeNodeDepths(iterations) {\n      var nodesByBreadth = d3.nest()\n          .key(function(d) { return d.x; })\n          .sortKeys(d3.ascending)\n          .entries(nodes)\n          .map(function(d) { return d.values; });\n  \n      //\n      initializeNodeDepth();\n      resolveCollisions();\n      for (var alpha = 1; iterations > 0; --iterations) {\n        relaxRightToLeft(alpha *= .99);\n        resolveCollisions();\n        relaxLeftToRight(alpha);\n        resolveCollisions();\n      }\n  \n      function initializeNodeDepth() {\n        var ky = d3.min(nodesByBreadth, function(nodes) {\n          return (size[1] - (nodes.length - 1) * nodePadding) / d3.sum(nodes, value);\n        });\n  \n        nodesByBreadth.forEach(function(nodes) {\n          nodes.forEach(function(node, i) {\n            node.y = i;\n            node.dy = node.value * ky;\n          });\n        });\n  \n        links.forEach(function(link) {\n          link.dy = link.value * ky;\n        });\n      }\n  \n      function relaxLeftToRight(alpha) {\n        nodesByBreadth.forEach(function(nodes, breadth) {\n          nodes.forEach(function(node) {\n            if (node.targetLinks.length) {\n              var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);\n              node.y += (y - center(node)) * alpha;\n            }\n          });\n        });\n  \n        function weightedSource(link) {\n          return center(link.source) * link.value;\n        }\n      }\n  \n      function relaxRightToLeft(alpha) {\n        nodesByBreadth.slice().reverse().forEach(function(nodes) {\n          nodes.forEach(function(node) {\n            if (node.sourceLinks.length) {\n              var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);\n              node.y += (y - center(node)) * alpha;\n            }\n          });\n        });\n  \n        function weightedTarget(link) {\n          return center(link.target) * link.value;\n        }\n      }\n  \n      function resolveCollisions() {\n        nodesByBreadth.forEach(function(nodes) {\n          var node,\n              dy,\n              y0 = 0,\n              n = nodes.length,\n              i;\n  \n          // Push any overlapping nodes down.\n          nodes.sort(ascendingDepth);\n          for (i = 0; i < n; ++i) {\n            node = nodes[i];\n            dy = y0 - node.y;\n            if (dy > 0) node.y += dy;\n            y0 = node.y + node.dy + nodePadding;\n          }\n  \n          // If the bottommost node goes outside the bounds, push it back up.\n          dy = y0 - nodePadding - size[1];\n          if (dy > 0) {\n            y0 = node.y -= dy;\n  \n            // Push any overlapping nodes back up.\n            for (i = n - 2; i >= 0; --i) {\n              node = nodes[i];\n              dy = node.y + node.dy + nodePadding - y0;\n              if (dy > 0) node.y -= dy;\n              y0 = node.y;\n            }\n          }\n        });\n      }\n  \n      function ascendingDepth(a, b) {\n        return a.y - b.y;\n      }\n    }\n  \n    function computeLinkDepths() {\n      nodes.forEach(function(node) {\n        node.sourceLinks.sort(ascendingTargetDepth);\n        node.targetLinks.sort(ascendingSourceDepth);\n      });\n      nodes.forEach(function(node) {\n        var sy = 0, ty = 0;\n        node.sourceLinks.forEach(function(link) {\n          link.sy = sy;\n          sy += link.dy;\n        });\n        node.targetLinks.forEach(function(link) {\n          link.ty = ty;\n          ty += link.dy;\n        });\n      });\n  \n      function ascendingSourceDepth(a, b) {\n        return a.source.y - b.source.y;\n      }\n  \n      function ascendingTargetDepth(a, b) {\n        return a.target.y - b.target.y;\n      }\n    }\n  \n    function center(node) {\n      return node.y + node.dy / 2;\n    }\n  \n    function value(link) {\n      return link.value;\n    }\n  \n    return sankey;\n  };\n  "]}